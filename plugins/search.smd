/**
//══════════════════════════════════════════════════════════════════════════════════════════════════════//
//                                                                                                      //
//                                ＷＨＡＴＳＡＰＰ ＢＯＴ－ＭＤ ＢＥＴＡ                                   //
//                                                                                                      // 
//                                         Ｖ：1．2．8                                                   // 
//                                                                                                      // 
//            ███████╗██╗   ██╗██╗  ██╗ █████╗ ██╗██╗         ███╗   ███╗██████╗                        //
//            ██╔════╝██║   ██║██║  ██║██╔══██╗██║██║         ████╗ ████║██╔══██╗                       //
//            ███████╗██║   ██║███████║███████║██║██║         ██╔████╔██║██║  ██║                       //
//            ╚════██║██║   ██║██╔══██║██╔══██║██║██║         ██║╚██╔╝██║██║  ██║                       //
//            ███████║╚██████╔╝██║  ██║██║  ██║██║███████╗    ██║ ╚═╝ ██║██████╔╝                       //
//            ╚══════╝ ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝╚══════╝    ╚═╝     ╚═╝╚═════╝                        //
//                                                                                                      //
//                                                                                                      //
//                                                                                                      //
//══════════════════════════════════════════════════════════════════════════════════════════════════════//
*
   * @project_name : Suhail-Md
   * @author : Suhail Tech Info
   * @youtube : https://www.youtube.com/@SuhailTechInfo
   * @description : Suhail-Md ,A Multi-functional whatsapp user bot.
   * @version 1.2.8
*
* 
   * Created By Suhail Tech Info.
   * © 2024 Suhail-Md.
*/



let Suhail_Md = "Suhail MD Whatsapp bot md"


const moment = require('moment-timezone')
const {fetchJson,smd, tlang,send, getBuffer, prefix, Config ,groupdb } = require('../lib')
let gis = require("async-g-i-s");
const axios = require('axios')
const fetch = require('node-fetch')

   //---------------------------------------------------------------------------
   const { shazam } = require('../lib')
   let yts = require("secktor-pack");
   smd({
           pattern: "find",
           alias :["shazam"],
           category: "search",
           desc: "Finds info about song",
           filename: __filename,
       },
       async(message) => {
         try{
            let mime = message.reply_message ? message.reply_message.mtype : ''
            if (!/audio/.test(mime)) return message.reply(`Reply audio ${prefix}find`);
            let buff = await message.reply_message.download();
            let data = await shazam(buff);
            if (!data || !data.status) return message.send(data);
            let h =`*TITLE: _${data.title}_* \n*ARTIST: _${data.artists}_*\n *ALBUM:* _${data.album}_ `
//   *𝚁𝚎𝚕𝚎𝚊𝚜𝚎:* _${data.release_date}
           await message.bot.sendUi(message.jid, { caption: h,  },{quoted : message} , "text",'true' );
       }catch(e){return await message.error(`${e}\n\n command: find`,e,`*_Didn't get any results, Sorry!_*`) }
})
    //------------------------------------------------------------------------------------

smd({
   pattern: "github",
   category: "search",
   desc: "Finds info about song",
   filename: __filename,
},
async(message, match) => {
 try{

   message.react("🔍")
         if (!match) return message.reply(`Give me a user name like ${prefix}github SuhailTechInfo`)

         const { data } = await axios(`https://api.github.com/users/${match}`)
   if(!data) return await message.send(`*_Didn't get any results, Provide valid user name!_*`)
   let gitdata =  data
         message.sendMessage(message.jid, {
           image: { url: gitdata.avatar_url }, caption:`ㅤㅤㅤ*[ GITHUB USER INFO ]*

🚩 Id : ${gitdata.id}
🔖 Nickname : ${gitdata.name}
🔖 Username : ${gitdata.login}
✨ Bio : ${gitdata.bio}
🏢 Company : ${gitdata.company}
📍 Location : ${gitdata.location}
📧 Email : ${gitdata.email}
📰 Blog : ${gitdata.blog}
🔓 Public Repo : ${gitdata.repos_url}
🔐 Public Gists : ${gitdata.gists_url}
💕 Followers : ${gitdata.followers}
👉 Following : ${gitdata.following}
🔄 Updated At : ${gitdata.updated_at}
🧩 Created At : ${gitdata.created_at}`
         }, { quoted: message })

          }catch(e){return await message.error(`${e}\n\n command: github`,e,`*_Didn't get any results, Sorry!_*`) }
   })

//------------------------------------------------------------------------------------
smd({
   pattern: "coffe",
   alias:["tea","kofi"],
   category: "search",
  react : "🫡",
   desc: "send randome coffe",
   filename: __filename,
},
async(m) => {
 try{
  // m.react("🫡")
   return await m.bot.sendMessage(m.chat, {image: { url: 'https://coffee.alexflipnote.dev/random' },caption: `Here is your Coffee...`, }, { quoted: m })

          }catch(e){return await m.error(`${e}\n\n command: coffe`,e,`*_Didn't get any results, Sorry!_*`) }


   })
//------------------------------------------------------------------------------------






    //---------------------------------------------------------------------------
smd({pattern: 'lyrics', alias :['lyric'],category: "search", desc: "Searche lyrics of given song name",use: '<text | song>',filename: __filename,},

    async(message, text,{cmdName}) => {
    if (!text) return message.reply(`*_Uhh please, give me song name_*\n*_Example ${prefix+cmdName} blue eyes punjabi_*`);
    try {
      const res = await ( await fetch(`https://inrl-web.onrender.com/api/lyrics?text=${text}`) ).json();
      function _0x1009() {
    const _0x445da8 = [
        'g\x20name!',
        'error\x20gett',
        'join',
        '\x20!lyrics\x20<',
        'messageID',
        'you\x20to\x20get',
        'threadID',
        '538fAeGNu',
        'wLhgS',
        'Get\x20lyrics',
        '2680mqsDEZ',
        '11jvhrTo',
        'Sorry,\x20the',
        'lyrics',
        'Sorry,\x20lyr',
        're\x20was\x20an\x20',
        'sendMessag',
        'music',
        '1635084ouwAcg',
        'CfePx',
        '39WykEBB',
        'rist.verce',
        'This\x20comma',
        'nd\x20allows\x20',
        's\x20for\x20a\x20so',
        'pFQll',
        '1904UtYVML',
        'oufi',
        'data',
        '16446ieCCJi',
        '\x20for\x20a\x20son',
        'ng.\x20Usage:',
        'ics\x20not\x20fo',
        '4417oWHaUa',
        'VEGik',
        'ing\x20the\x20ly',
        'rics\x20<song',
        'get',
        '21yJjKCM',
        'axios',
        'und!',
        '5idrOam',
        'error',
        'exports',
        'Please\x20pro',
        'vide\x20a\x20son',
        '1015236iGOdWW',
        '\x20name>',
        '{prefix}ly',
        '54148XrYTYY',
        'rics!',
        '\x20the\x20lyric',
        'rulex-al/l',
        'https://ly',
        '2926470SfGCFV',
        'l.app/api/',
        '1.0',
        'song\x20name>'
    ];
    _0x1009 = function () {
        return _0x445da8;
    };
    return _0x1009();
}
const _0x1d4998 = _0x198c;
(function (_0x303978, _0x159fff) {
    const _0x168273 = _0x198c, _0x185212 = _0x303978();
    while (!![]) {
        try {
            const _0x325026 = parseInt(_0x168273(0x163)) / (-0x3 * 0x415 + -0x2e3 * -0x7 + 0x1 * -0x7f5) * (parseInt(_0x168273(0x150)) / (-0x233 * 0x1 + 0x1923 + -0x496 * 0x5)) + parseInt(_0x168273(0x16f)) / (0x3 * 0xcf7 + -0x7b2 * -0x5 + -0x4d5c) * (-parseInt(_0x168273(0x17a)) / (-0xc74 + 0x28f * -0x8 + 0x20f0)) + parseInt(_0x168273(0x172)) / (-0x8 * -0xd + 0x2 * 0x11d + -0x29d) * (-parseInt(_0x168273(0x166)) / (-0x12b2 + 0x2ac + -0x806 * -0x2)) + parseInt(_0x168273(0x16a)) / (0x25 * 0xd3 + 0x2e5 * -0x2 + 0x1b * -0xea) * (parseInt(_0x168273(0x153)) / (0x23c1 + 0x2402 + 0x47bb * -0x1)) + parseInt(_0x168273(0x15b)) / (0x22cb + -0x17ed + -0xad5) + -parseInt(_0x168273(0x17f)) / (0x21b2 + 0x10bb + -0x3263) * (parseInt(_0x168273(0x154)) / (0x2 * 0x50e + -0x2fb * -0xa + -0x27df)) + parseInt(_0x168273(0x177)) / (-0x17 * 0x1a6 + -0x5ab + 0x2ba1) * (-parseInt(_0x168273(0x15d)) / (-0x1b * -0x31 + -0x1 * -0x2287 + 0x33 * -0xc7));
            if (_0x325026 === _0x159fff)
                break;
            else
                _0x185212['push'](_0x185212['shift']());
        } catch (_0x2e609c) {
            _0x185212['push'](_0x185212['shift']());
        }
    }
}(_0x1009, -0x31182 * -0x1 + 0x6d5d * 0x3 + -0x14 * 0x4a6));
function _0x198c(_0xd13b70, _0x547838) {
    const _0x3bebcf = _0x1009();
    return _0x198c = function (_0x2db7ae, _0x501fec) {
        _0x2db7ae = _0x2db7ae - (-0x363 + -0xb30 + 0xfde * 0x1);
        let _0x5742b5 = _0x3bebcf[_0x2db7ae];
        return _0x5742b5;
    }, _0x198c(_0xd13b70, _0x547838);
}
const axios = require(_0x1d4998(0x170));
module[_0x1d4998(0x174)] = {
    'config': {
        'name': _0x1d4998(0x156),
        'version': _0x1d4998(0x181),
        'author': _0x1d4998(0x17d) + _0x1d4998(0x164),
        'countDown': 0x5,
        'role': 0x0,
        'shortDescription': { 'en': _0x1d4998(0x152) + _0x1d4998(0x167) + 'g' },
        'longDescription': { 'en': _0x1d4998(0x15f) + _0x1d4998(0x160) + _0x1d4998(0x14e) + _0x1d4998(0x17c) + _0x1d4998(0x161) + _0x1d4998(0x168) + _0x1d4998(0x14c) + _0x1d4998(0x182) },
        'category': _0x1d4998(0x15a),
        'guide': { 'en': _0x1d4998(0x179) + _0x1d4998(0x16d) + _0x1d4998(0x178) }
    },
    'onStart': async function ({
        api: _0x90817a,
        event: _0x579f8d,
        args: _0x2330ce
    }) {
        const _0x257395 = _0x1d4998, _0x593145 = {
                'pFQll': _0x257395(0x175) + _0x257395(0x176) + _0x257395(0x183),
                'CfePx': function (_0x525da4, _0x5b7648) {
                    return _0x525da4(_0x5b7648);
                },
                'wLhgS': _0x257395(0x157) + _0x257395(0x169) + _0x257395(0x171),
                'VEGik': _0x257395(0x155) + _0x257395(0x158) + _0x257395(0x184) + _0x257395(0x16c) + _0x257395(0x17b)
            }, _0x4118d4 = _0x2330ce[_0x257395(0x14b)]('\x20');
        if (!_0x4118d4) {
            _0x90817a[_0x257395(0x159) + 'e'](_0x593145[_0x257395(0x162)], _0x579f8d[_0x257395(0x14f)], _0x579f8d[_0x257395(0x14d)]);
            return;
        }
        const _0x243161 = _0x257395(0x17e) + _0x257395(0x15e) + _0x257395(0x180) + _0x593145[_0x257395(0x15c)](encodeURIComponent, _0x4118d4);
        try {
            const _0x53a68a = await axios[_0x257395(0x16e)](_0x243161), _0x500c65 = _0x53a68a[_0x257395(0x165)][_0x257395(0x156)];
            if (!_0x500c65) {
                _0x90817a[_0x257395(0x159) + 'e'](_0x593145[_0x257395(0x151)], _0x579f8d[_0x257395(0x14f)], _0x579f8d[_0x257395(0x14d)]);
                return;
            }
            _0x90817a[_0x257395(0x159) + 'e'](_0x500c65, _0x579f8d[_0x257395(0x14f)], _0x579f8d[_0x257395(0x14d)]);
        } catch (_0x3a51c0) {
            console[_0x257395(0x173)](_0x3a51c0), _0x90817a[_0x257395(0x159) + 'e'](_0x593145[_0x257395(0x16b)], _0x579f8d[_0x257395(0x14f)], _0x579f8d[_0x257395(0x14d)]);
        }
    }
};




})


    //---------------------------------------------------------------------------
smd({
            pattern: "imdb",
            category: "search",
            desc: "sends info of asked movie/series.",
            use: '<text>',
            filename: __filename,
        },
        async(message, match) => {
          try{
            if (!match) return message.reply(`_Name a Series or movie ${tlang().greet}._`);
            let {data} = await axios.get(`http://www.omdbapi.com/?apikey=742b2d09&t=${match}&plot=full`);
            if(!data || data.cod == '404') return await message.reply(`*_Please provide valid country name!_*`)

            let imdbt = "⚍⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚍\n" + " ``` 𝕀𝕄𝔻𝔹 𝕊𝔼𝔸ℝℂℍ```\n" + "⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎\n";
            imdbt += "🎬Title      : " + data.Title + "\n";
            imdbt += "📅Year       : " + data.Year + "\n";
            imdbt += "⭐Rated      : " + data.Rated + "\n";
            imdbt += "📆Released   : " + data.Released + "\n";
            imdbt += "⏳Runtime    : " + data.Runtime + "\n";
            imdbt += "🌀Genre      : " + data.Genre + "\n";
            imdbt += "👨🏻‍💻Director   : " + data.Director + "\n";
            imdbt += "✍Writer     : " + data.Writer + "\n";
            imdbt += "👨Actors     : " + data.Actors + "\n";
            imdbt += "📃Plot       : " + data.Plot + "\n";
            imdbt += "🌐Language   : " + data.Language + "\n";
            imdbt += "🌍Country    : " + data.Country + "\n";
            imdbt += "🎖️Awards     : " + data.Awards + "\n";
            imdbt += "📦BoxOffice  : " + data.BoxOffice + "\n";
            imdbt += "🏙️Production : " + data.Production + "\n";
            imdbt += "🌟imdbRating : " + data.imdbRating + "\n";
            imdbt += "❎imdbVotes  : " + data.imdbVotes + "\n\n";
            imdbt += Config.caption ;
            await message.bot.sendUi(message.jid, { caption: imdbt,  },{quoted : message} , "image",data.Poster );
        }catch(e){return await message.error(`${e}\n\n command: ${cmdName}`,e,`*_Uhh dear, Didn't get any results!_*`) }
        }
    )
    //---------------------------------------------------------------------------
smd({
            pattern: "weather",
            category: "search",
            desc: "Sends weather info about asked place.",
            use: '<location>',
            filename: __filename,
        },
        async(message, text) => {
          try{
            if (!text) return message.reply(`*_Give me city name, ${message.isCreator ? "Buddy" : "Idiot"}!!_*`);
            let {data} = await axios.get( `https://api.openweathermap.org/data/2.5/weather?q=${text}&units=metric&appid=060a6bcfa19809c2cd4d97a212b19273&language=en`);
            if(!data || data.cod === '404') return await message.reply(`*_Please provide valid city name!_*`)
            let textw = `*🌟Weather of  ${text}*\n\n`;
            textw += `*Weather:-* ${data.weather[0].main}\n`;
            textw += `*Description:-* ${data.weather[0].description}\n`;
            textw += `*Avg Temp:-* ${data.main.temp}\n`;
            textw += `*Feels Like:-* ${data.main.feels_like}\n`;
            textw += `*Pressure:-* ${data.main.pressure}\n`;
            textw += `*Humidity:-* ${data.main.humidity}\n`;
            textw += `*Humidity:-* ${data.wind.speed}\n`;
            textw += `*Latitude:-* ${data.coord.lat}\n`;
            textw += `*Longitude:-* ${data.coord.lon}\n`;
            textw += `*Country:-* ${data.sys.country}\n\n`;
            textw +=Config.caption ;
            message.bot.sendUi(message.jid, { caption: textw, },{quoted : message} ,"text",'true' );

        }catch(e){return await message.error(`${e}\n\n command: weather`,e,`*_Please provide valid city name!_*`) }
        }
    )
//---------------------------------------------------------------------------
smd({
         pattern: "npm",
         desc: "download mp4 from url.",
         category: "search",
         use: '<package name>',
         filename: __filename
     },
     async( message, match) => { 
       try{
         if (!match) return message.reply('Please give me package name.📦')
         const {data} = await axios.get(`https://api.npms.io/v2/search?q=${match}`)
        let txt = data.results.map(({ package: pkg }) => `*${pkg.name}* (v${pkg.version})\n_${pkg.links.npm}_\n_${pkg.description}_`).join('\n\n')?.trim()
          data && txt ? await message.reply(txt) : await message.reply('*No Result Found. Sorry!!*')
          }catch(e){await message.error(`${e}\n\ncommand : npm`, e  )}
     }
 )

    //---------------------------------------------------------------------------
/*
smd({
            pattern: "horo",
            category: "search",
            desc: "Gives horoscope info of user.",
            use: '<sign>\n:Example: horo libra',
            filename: __filename,
        },
        async(message, text) => {            
            try {
                if (!text) return message.reply(`*_Provide me a horoscope sign name!_*`)
                const URL = `https://aztro.sameerkumar.website/?sign=${text}&day=today`;
                fetch(URL, {  method: 'POST' })
                    .then(response => response.json())
                    .then(json => {
                      console.log(json)
                        let textw = `*🌟 Horoscope of  ${text}*\n\n`;
                        textw += `*Current Date:* ${json.current_date}.\n`;
                        textw += `*Sign:* ${text}.\n`;
                        textw += `*Lucky Time:* ${json.lucky_time}.\n`;
                        textw += `*Compatibility:* ${json.compatibility}.\n`;
                        textw += `*Lucky Number:* ${json.lucky_number}.\n`;
                        textw += `*Lucky Color:* ${json.color}.\n`;
                        textw += `*Today Mood:* ${json.mood}.\n`;
                        textw += `*Overall:* ${json.description}.\n\n`;
                        textw +=Config.caption ;
                        message.bot.sendUi(message.jid, { caption: textw,  },{quoted : message} ,"text",'true' );
                       // message.reply(textw)
                    });

            }catch(e){return await message.error(`${e}\n\n command: horo`,e,`*_Uhh dear, Didn't get any results!_*`) }
        }
    )
    */
    //---------------------------------------------------------------------------

smd({
            pattern: "cric",
            category: "search",
            desc: "Sends info of given query from Google Search.",
            use: '<text>',
            filename: __filename,
        },
        async(message, text) => {
try{
            await message.reply (`*_Please Wait, Getting Cricket Info_*`);
const response = await fetch('https://api.cricapi.com/v1/currentMatches?apikey=f68d1cb5-a9c9-47c5-8fcd-fbfe52bace78');
const dat = await response.json();

for (let i=0 ; i <  dat.data.length; i++) {
let j = i+1;
text +=`\n*--------------------- MATCH ${i}-------------------*`;
text +="\n*Match Name:* "+ dat.data[i].name;
text +="\n*Match Status:* "+ dat.data[i].status;
text +="\n*Match Date:* " + dat.data[i].dateTimeGMT ;
text +="\n*Match Started:* " + dat.data[i].matchStarted;
text +="\n*Match Ended:* " + dat.data[i].matchEnded;

}
 return await message.reply( text);
}catch(e){return await message.error(`${e}\n\n command: cric`,e,`*_Uhh dear, Didn't get any results!_*`) }

})

//---------------------------------------------------------------------------
smd({
            pattern: "google",
            alias :['search','gsearch'],
            category: "search",
            desc: "Sends info of given query from Google Search.",
            use: '<text>',
            filename: __filename,
        },
        async(message, text) => {
          try{
            if (!text) return message.reply(`*_Uhh please, give me a query_*\n*_Example : ${prefix}google Suhail Md._*`);
            let google = require('google-it');
            google({ 'query': text}).then(res => {
                let msg= `Google Search From : ${text} \n\n`;
                for (let g of res) {
                    msg+= `➣ Title : ${g.title}\n`;
                    msg+= `➣ Description : ${g.snippet}\n`;
                    msg+= `➣ Link : ${g.link}\n\n────────────────────────\n\n`;
                }

                return message.reply(msg);
            })
          }catch(e){return await message.error(`${e}\n\n command: google`,e,`*_Uhh dear, Didn't get any results!_*`) }

        }
    )


    //---------------------------------------------------------------------------
smd({
            pattern: "image",
            alias: ["img" , "pic"],
            category: "search",
            desc: "Searches Image on Google",
            use: '<text>',
            filename: __filename,
        },
        async(message, match) => {
try{
  let text = match ? match : message.reply_text;
   if (!text) return message.reply(`Provide me a query!\n*Ex : .image luffy |10*`)
   
   let name1 = text.split("|")[0] || text
   let name2 = text.split("|")[1] || `5`


    let nn = parseInt(name2) || 5
    let Group = await groupdb.findOne({ id: message.chat })
    let safe = Group.nsfw == "true" ? "off" : "on"
try{
    let n = await gis(name1, { query: { safe: safe },
        userAgent:  'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36'
      },)
console.log("images results : " , n)

    if(n && n[0]){
    nn = n && n.length > nn ? nn : n.length 
   message.reply(`*_Sending images of '${name1}' in chat!_*`)
    for (let i = 0; i < nn; i++) {
        try{
        let random = Math.floor(Math.random() * n.length)
        message.bot.sendFromUrl(message.jid ,n[random].url,"",message,{},"image" )   
        n.splice(random, 1);
    }catch {}
    }
    return ;
}


}catch(e){console.log("ERROR IN SYNC G>I>S IMAGE PACKAGE\n\t", e)}























   let buttonMessage = {}

  
    let urlsArray = [];
    const params = {
        q: name1, 
        tbm: "isch",
        hl: "en",
        gl: "in",
        ijn: "0", 
    };
    const headers = {
      "User-Agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36",
      "Accept-Encoding": "application/json",
  };

    const res = await axios.get("https://www.google.com/search", { headers: headers, params: params });
    let body = res.data;
    body = body.slice(body.lastIndexOf("AF_initDataCallback"));
    body = body.slice(body.indexOf("["));
    body = body.slice(0, body.indexOf("</script>")-1);
    body = body.slice(0, body.lastIndexOf(","));

    const img = JSON.parse(body);

    const imgObjects = img[56][1][0][0][1][0];

    for (let i = 0; i < name2; i++) {
        if (imgObjects[i] && imgObjects[i][0][0]["444383007"][1]) {
            let url = imgObjects[i][0][0]["444383007"][1][3][0]; // the url
            urlsArray.push(url);
        }
    }

for (let url of urlsArray) { try{ message.bot.sendFromUrl(message.chat ,url,"",message,{},"image" )  }catch {} }



}catch(e){return await message.error(`${e}\n\n command: image`,e,`*_Uhh dear, Didn't get any results!_*`) }
 })
    //---------------------------------------------------------------------------
smd({
            pattern: "couplepp",
            category: "search",
            desc: "Sends two couples pics.",
            filename: __filename,
        },
        async(message) => {
          try{
            let anu = await fetchJson('https://raw.githubusercontent.com/iamriz7/kopel_/main/kopel.json')
            let random = anu[Math.floor(Math.random() * anu.length)]
            message.reply(random.male, {caption: `*✦Couple Male profile✦*`}, "image")
            message.reply(random.female, {caption: `*✦Couple Female profile✦*`}, "image")
          }catch(e){return await message.error(`${e}\n\n command: couplepp`,e,`*_Uhh dear, Didn't get any results!_*`) }
        }

    ) 
    //---------------------------------------------------------------------------
smd({
        pattern: "iswa",
        alias: ["oldwa","bio","onwa"],
        category: "search",
        desc: "Searches in given rage about given number.",
        use: '9112345678xx',
        filename: __filename,
    },
    async(message, text) => {
 if(!text) return await message.reply('Give Me Number without + sign. Example: .iswa 9231844741xx')
        var inputnumber = text.split(" ")[0]
        if (!inputnumber.includes('x')) return message.reply(`*You did not add x*\nExample: iswa 9231844741xx  \n ${Config.caption}`)
        message.reply(`*Searching for WhatsApp account in given range...* \n ${Config.caption}`)

        function countInstances(string, word) {  return string.split(word).length - 1; }
        var number0 = inputnumber.split('x')[0]
        var number1 = inputnumber.split('x')[countInstances(inputnumber, 'x')] ? inputnumber.split('x')[countInstances(inputnumber, 'x')] : ''
        var random_length = countInstances(inputnumber, 'x')
        var randomxx;
        if (random_length == 1) { randomxx = 10 } 
        else if (random_length == 2) { randomxx = 100 } 
        else if (random_length == 3) { randomxx = 1000 }

        text = `*--『 List of Whatsapp Numbers 』--*\n\n`
        var nobio = `\n*Bio:* || \nHey there! I am using WhatsApp.\n`
        var nowhatsapp = `\n*Numbers with no WhatsApp account within provided range.*\n`
        for (let i = 0; i < randomxx; i++) {
            var nu = ['1', '2', '3', '4', '5', '6', '7', '8', '9']
            var status1 = nu[Math.floor(Math.random() * nu.length)]
            var status2 = nu[Math.floor(Math.random() * nu.length)]
            var status3 = nu[Math.floor(Math.random() * nu.length)]
            var dom4 = nu[Math.floor(Math.random() * nu.length)]
            var random;
            if (random_length == 1) { random = `${status1}` } 
            else if (random_length == 2) {random = `${status1}${status2}` } 
            else if (random_length == 3) {random = `${status1}${status2}${status3}` } 
            else if (random_length == 4) {random = `${status1}${status2}${status3}${dom4}` }

            var anu = await message.bot.onWhatsApp(`${number0}${i}${number1}@s.whatsapp.net`);
            var anuu = anu.length !== 0 ? anu : false
            try 
            {
                  try { var anu1 = await message.bot.fetchStatus(anu[0].jid); } 
                  catch { var anu1 = '401' ; }
                  if (anu1 == '401' || anu1.status.length == 0) { nobio += `wa.me/${anu[0].jid.split("@")[0]}\n` ; } 
                  else {  text += `🧐 *Number:* wa.me/${anu[0].jid.split("@")[0]}\n ✨*Bio :* ${anu1.status}\n🍁*Last update :* ${moment(anu1.setAt).tz('Asia/Karachi').format('HH:mm:ss DD/MM/YYYY')}\n\n` ;   }
            } catch { nowhatsapp += ` ≛ ${number0}${i}${number1}\n`; }
        }
        return await message.reply(`${text}${nobio}${nowhatsapp}`)

    }
)


smd({
        pattern: "nowa",
        category: "search",
        desc: "Searches in given rage about given number.",
        use: '9112345678xx',
        filename: __filename,
    },
    async(message, text) => {
if(!text) return await message.reply('Give Me Number without + sign. Example: .nowa 9231844741xx')
const inputNumber = text.split(" ")[0]
if (!inputNumber.includes('x')) return message.reply(`*You did not add x in number.*\nExample: ${prefix}nowa 9231844741xx  \n ${Config.caption}`)
message.reply(`*Searching for WhatsApp account in the given range...*\n${Config.caption}`);
function countInstances(string, word) { return string.split(word).length - 1; }
const number0 = inputNumber.split('x')[0];
const number1 = inputNumber.split('x').slice(-1)[0] || '';
const randomLength = countInstances(inputNumber, 'x');
const randomxx = [10, 100, 1000][randomLength - 1] || 0;
let nobio = `\n*『 WhatsApp Account With No Bio』* \n`;
 let nobios='';
let nowhatsapp = `*『 Numbers With No WhatsApp Account 』* \n\n`;
for (let i = 0; i < randomxx; i++) 
{
    const nu = ['1', '2', '3', '4', '5', '6', '7', '8', '9'];
    const status = nu.slice(0, randomLength).map(() => nu[Math.floor(Math.random() * nu.length)]).join('');
    const random = `${status}${nu[Math.floor(Math.random() * nu.length)]}`.slice(0, randomLength);
    const anu = await message.bot.onWhatsApp(`${number0}${i}${number1}`);
    const anuu = anu.length !== 0 ? anu : false;
    try 
    {
         const anu1 = await message.bot.fetchStatus(anu[0].jid);
         if (anu1 === '401' || anu1.status.length === 0) {  nobios += `wa.me/${anu[0].jid.split("@")[0]}\n`; } 
    } catch { nowhatsapp += ` ≛ ${number0}${i}${number1}\n`;  }
}
if(!nobios){ nobio = ''; } else {nobio += nobios+'\n\n' ;}
return await message.reply(`${nobio}${nowhatsapp}${Config.caption}`);

})
